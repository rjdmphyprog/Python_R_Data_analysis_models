knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
knn.pred[,1]
table(knn.pred, testY)
knn.pred[,2]
knn.pred[,0]
knn.pred[]
View(knn.pred)
View(knn.pred)[,1]
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
table(knn.pred, testY)
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
table(knn.pred[,], testY)
table(knn.pred[,1], testY)
table(knn.pred, testY)
testY <- test_set$Sold
trainX <- train_set[,-16]
testX <- test_set[, -16]
trainY <- train_set$Sold
testY <- test_set$Sold
k = 3
trainX_s <- scale(trainX)
testX_s <- scale(testX)
set.seed(0)
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
table(knn.pred, testY)
acc <- c,[1,1] + cm[2,2]
acc <- c[1,1] + cm[2,2]
acc <- c[0,0] + cm[2,2]
cm
cm <- table(knn.pred, testY)
cm
acc <- cm[1,1]
acc <- cm[1,1] + cm[2,2]
acc
acc <- /cm[1,1] + cm[2,2]) / length(testY)
acc <- /cm[1,1] + cm[2,2]) / 120
acc <- cm[1,1] + cm[2,2]) / length(testY)
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
k = 9
trainX_s <- scale(trainX)
testX_s <- scale(testX)
set.seed(0)
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
k = 34
trainX_s <- scale(trainX)
testX_s <- scale(testX)
set.seed(0)
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
k = 9
trainX_s <- scale(trainX)
testX_s <- scale(testX)
set.seed(0)
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
source('C:/Users/Rolando/Workspace/Machine Learning/Data Analysis/House_price(classification_models)/house_price_knearest.R', echo=TRUE)
install.packages("superml")
library(superml)
bestKNN <- GridSearchCV(knn(), parameters = seq(1, 10))
knn.pred <- knn.cv(trainX_s, testX_s, trainY, k = seq(1, 10))
knn.pred <- knn(trainX_s, testX_s, trainY, k = seq(1, 10))
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
knn.pred <- knn(trainX_s, testX_s, trainY, k = seq(1, 100))
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
knn.pred <- knn(trainX_s, testX_s, trainY, k = seq(2, 100))
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
knn.pred <- knn(trainX_s, testX_s, trainY, k = seq(2, 1000))
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
knn.pred <- knn(trainX_s, testX_s, trainY, k = c(1,2,3,4,5,6,7,8,9))
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
knn.pred <- knn(trainX_s, testX_s, trainY, k = 1)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
knn.pred <- knn(trainX_s, testX_s, trainY, k = 2)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
knn.pred <- knn(trainX_s, testX_s, trainY, k = 3)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
#Searching the best KNN
install.packages("caret")
library(caret)
library(lattice)
library(ggplot2)
library(caret)
grid = expand.grid(k = c(1, 3, 9, 12))
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 4,
search = "grid"),
tuneGrid = grid)
best_knn$results
grid = expand.grid(k = seq(1, 10))
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 4,
search = "grid"),
tuneGrid = grid)
best_knn$results
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid)
best_knn$results
grid = expand.grid(k = seq(1, 100))
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid)
best_knn$results
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid, metric = "Accuracy")
best_knn$results
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 100,
search = "grid"),
tuneGrid = grid, metric = "Accuracy")
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid, metric = "Accuracy")
best_knn
grid = expand.grid(k = seq(1, 325))
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid, metric = "Accuracy")
best_knn
grid = expand.grid(k = seq(1, 325))
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid)
grid = expand.grid(k = seq(1, 100))
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid)
best_knn = train(trainX_s, trainY, method = "knn",
trControl = trainControl(method = "repeatedcv",
number = 3,
search = "grid"),
tuneGrid = grid)
best_knn
k = 69
trainX_s <- scale(trainX)
testX_s <- scale(testX)
set.seed(0)
knn.pred <- knn(trainX_s, testX_s, trainY, k = 3)
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
k = 1
trainX_s <- scale(trainX)
testX_s <- scale(testX)
set.seed(0)
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
k = 9
trainX_s <- scale(trainX)
testX_s <- scale(testX)
set.seed(0)
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
best_knn = train(Sold~., data = train_set, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid, preProcess = c("center", "scale"), tuneLenght = 20)
best_knn
best_knn = train(x = trainX_s, y = trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid, preProcess = c("center", "scale"), tuneLenght = 20)
trainY = factor(trainY)
best_knn = train(x = trainX_s, y = trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid, preProcess = c("center", "scale"), tuneLenght = 20)
install.packages("e1071")
library(e1071)
best_knn = train(x = trainX_s, y = trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 3,
search = "grid"),
tuneGrid = grid, preProcess = c("center", "scale"), tuneLenght = 20)
best_knn = train(x = trainX_s, y = trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 2,
search = "grid"),
tuneGrid = grid)
best_knn
set.seed(0)
best_knn = train(x = trainX_s, y = trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 2,
search = "grid"),
tuneGrid = grid)
best_knn
best_knn = train(x = trainX_s, y = trainY, method = "knn",
trControl = trainControl(method = "cv",
number = 2,
search = "grid"),
tuneGrid = grid)
best_knn
set.seed(0)
trControl = trainControl(method = "cv",
number = 2,
search = "grid")
best_knn = train(x = trainX_s, y = trainY, method = "knn",
, trControl = trControl,
tuneGrid = grid)
best_knn$
k = 9
best_knn
best_knn
set.seed(0)
trControl = trainControl(method = "cv",
number = 2,
search = "grid")
best_knn = train(x = trainX_s, y = trainY, method = "knn",
, trControl = trControl,
tuneGrid = grid)
best_knn
best_knn = train(x = trainX_s, y = trainY, method = "knn",
, trControl = trControl,
tuneGrid = grid)
best_knn
grid = expand.grid(k = seq(1, 325))
trainY = factor(trainY)
grid = expand.grid(k = seq(1, 300))
trainY = factor(trainY)
set.seed(0)
trControl = trainControl(method = "cv",
number = 2,
search = "grid")
best_knn = train(x = trainX_s, y = trainY, method = "knn",
, trControl = trControl,
tuneGrid = grid)
best_knn
set.seed(0)
k = 63
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
k = 9
trainX_s <- scale(trainX)
testX_s <- scale(testX)
trainX_s
set.seed(0)
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
k = 10
trainX_s <- scale(trainX)
testX_s <- scale(testX)
trainX_s
set.seed(0)
knn.pred <- knn(trainX_s, testX_s, trainY, k = k)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
source('C:/Users/Rolando/Workspace/Machine Learning/Data Analysis/House_price(classification_models)/house_price_knearest.R', echo=TRUE)
install.packages("MASS")
install.packages("class")
set.seed(0)
knn.pred <- knn(trainX_s, testX_s, trainY, k = 3)
cm <- table(knn.pred, testY)
cm
acc <- (cm[1,1] + cm[2,2]) / length(testY)
acc
for (i in 1:10):
print(i)
print(i)
for (i in 1:10){
print(i)
}
if (4<5){
print("Soy menor")
} else{
print("soy mayor")
}
if (6<5){
print("Soy menor")
} else{
print("soy mayor")
}
sumar <- function(a, b){
suma = a + b
return(suma)
}
a = sumar(4, 5)
a
sumar <- function(a, b){
suma = a + b
mult = a*b
return(suma, mult)
}
a, b = sumar(4, 5)
c(a, b) = sumar(4, 5)
return(c(suma, mult))
sumar <- function(a, b){
suma = a + b
mult = a*b
return(c(suma, mult))
}
c(a, b) = sumar(4, 5)
a = sumar(4, 5)
a
a[1]
for (i in 1:1){
print(i)
}
for (i in 2:1){
print(i)
}
print("hola" + 5)
print("hola", 5)
print("hola", a)
print("hola"+ a)
print("hola"+ "a")
print(paste("a", "b"))
print(paste("a", 5))
SearchBestKNN <- function(trainx_values, testx_values, trainy_values, testy_values, k){
acc <- 0
for (i in 1:k){
set.seed(0)
temp.pred <- knn(trainx_values, testx_values, trainy_values, k = i)
temp_matrix <- table(temp.pred, testy_values)
temp_acc <- (temp_matrix[1,1] + temp_matrix[2,2]) / length(testy_values)
if (temp_acc > acc){
bestk_value <- i
bestknn.pred <- temp.pred
best_confusion_matrix <- temp_matrix
acc <- temp_acc
}
print(paste("Best k values is k =", bestk_value))
}
}
SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 3)
SearchBestKNN <- function(trainx_values, testx_values, trainy_values, testy_values, k){
acc <- 0
for (i in 1:k){
set.seed(0)
temp.pred <- knn(trainx_values, testx_values, trainy_values, k = i)
temp_matrix <- table(temp.pred, testy_values)
temp_acc <- (temp_matrix[1,1] + temp_matrix[2,2]) / length(testy_values)
if (temp_acc > acc){
bestk_value <- i
bestknn.pred <- temp.pred
best_confusion_matrix <- temp_matrix
acc <- temp_acc
}
}
print(paste("Best k values is k =", bestk_value))
}
SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 3)
SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 10)
SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 100)
SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 100)
SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 100)
SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 323)
SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 325)
SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 1000)
SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 386)
SearchBestKNN <- function(trainx_values, testx_values, trainy_values, testy_values, k){
acc <- 0
for (i in 1:k){
set.seed(0)
temp.pred <- knn(trainx_values, testx_values, trainy_values, k = i)
temp_matrix <- table(temp.pred, testy_values)
temp_acc <- (temp_matrix[1,1] + temp_matrix[2,2]) / length(testy_values)
if (temp_acc > acc){
bestk_value <- i
bestknn.pred <- temp.pred
best_confusion_matrix <- temp_matrix
acc <- temp_acc
}
}
print(paste("Best k values is k =", bestk_value))
return(c(bestknn.pred, best_confusion_matrix, acc))
}
best_knn <- SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 386)
best_knn[2]
best_knn
SearchBestKNN <- function(trainx_values, testx_values, trainy_values, testy_values, k){
acc <- 0
for (i in 1:k){
set.seed(0)
temp.pred <- knn(trainx_values, testx_values, trainy_values, k = i)
temp_matrix <- table(temp.pred, testy_values)
temp_acc <- (temp_matrix[1,1] + temp_matrix[2,2]) / length(testy_values)
if (temp_acc > acc){
bestk_value <- i
bestknn.pred <- temp.pred
best_confusion_matrix <- temp_matrix
acc <- temp_acc
}
}
print(paste("Best k values is k =", bestk_value))
return(list(pred = bestknn.pred, confusion = best_confusion_matrix, accuracy = acc))
}
best_knn <- SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 386)
best_knn$confusion
best_knn$accuracy
best_knn <- SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 386)
#Creating a function to search the best k value depending of accuracy
SearchBestKNN <- function(trainx_values, testx_values, trainy_values, testy_values, k, seed = 0){
acc <- 0
for (i in 1:k){
set.seed(seed)
temp.pred <- knn(trainx_values, testx_values, trainy_values, k = i)
temp_matrix <- table(temp.pred, testy_values)
temp_acc <- (temp_matrix[1,1] + temp_matrix[2,2]) / length(testy_values)
if (temp_acc > acc){
bestk_value <- i
bestknn.pred <- temp.pred
best_confusion_matrix <- temp_matrix
acc <- temp_acc
}
}
print(paste("Best k values is k =", bestk_value))
return(list(pred = bestknn.pred, confusion = best_confusion_matrix, accuracy = acc))
}
best_knn <- SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 386)
best_knn$confusion
best_knn$accuracy
best_knn <- SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 386, seed = 100)
best_knn$confusion
best_knn$accuracy
best_knn <- SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 386, seed = 1000)
best_knn$confusion
best_knn$accuracy
best_knn$pred
best_knn <- SearchBestKNN(trainX_s, testX_s, trainY, testY, k = 386, seed = 0)
best_knn$confusion
best_knn$accuracy
source('C:/Users/Rolando/Workspace/Machine Learning/Data Analysis/House_price(classification_models)/house_price_knearest.R', echo=TRUE)
install.packages("MASS")
install.packages("class")
install.packages("class")
a <- knn(trainX_s, testX_s, trainY, k = 274, type = "response")
a <- knn(trainX_s, testX_s, trainY, k = 274)
a
a <- knn(trainX_s, testX_s, trainY, k = 274, prob = TRUE)
a
a <- knn(trainX_s, testX_s, trainY, k = 274, prob = FALSE)
a
barplot(best_knn$confusion)
hist(best_knn$confusion)
barplot(best_knn$confusion)
best_knn$confusion
16/(16+11)
16/(16+36)
16/(16+57)
