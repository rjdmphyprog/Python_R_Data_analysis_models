demo()
2+2
2-2
2/2
2%2
2//2
2<3
2<=3
2=="
exit()
"
for a in range(10):
q()
source('~/.active-rstudio-document', echo=TRUE)
2+3
clean
clean()
cls
a = 2 + 3
a
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
b[0]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
load("~/.RData")
setwd("~/")
load("~/.RData")
load("~/.RData")
setwd("~/WorkspaceR")
"""#Clase basica
a = 2 + 3
a
#this is for comments like python
print("Hello World")
a <- 3 + 5
b <- c(1, 2, 3, 4, 5)
b[3:5]
c <- 1:10
c
d <- c(1, "a", 5, TRUE)
d[4]
e <- f <- 1:20
g <- e + f
print(g)
g2 <- e * f
E <- 10
ls()
rm(E)
remove(e)
ls()
rm(list = ls())"""
source('~/WorkspaceR/basicsR.R', echo=TRUE)
source('~/WorkspaceR/basicsR.R', echo=TRUE)
source('~/WorkspaceR/basicsR.R', echo=TRUE)
library(
)
search()
require("LiblineaR")
search()
detach("package:LiblineaR")
search()
detach("package:LiblineaR", unload = TRUE)
#browseURL("https://cran.r-project.org/web/views/")
install.packages("LiblineaR")
install.packages("LiblineaR")
require("LiblineaR")
search()
detach("package:LiblineaR", unload = TRUE)
search()
remove.packages("LiblineaR")
? ggplot2
require("ggplot2")
? graphics
? ggplot2
?? ggplot2
install.packages("ggplot2")
require("ggplot2")
detach("ggplot2")
detach("ggplot2")
detach("package:ggplot2", unload = TRUE)
? ggplot2
?? ggplot2
??ggplot2
?ggplot2
install.packages("ggplot2")
require("ggplot2")
?ggplot2
source('~/WorkspaceR/basicsR.R')
install.packages("ggplot2")
source('~/WorkspaceR/basicsR.R')
install.packages("LiblineaR")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
require("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
require("datasets")
search()
? datasets
data()
? iris
str(iris)
iris
iris
data("iris")
x <- data("iris")
x
str(x)
x <- iris
x
x1 <- 1:10
x2 < c(2, 5, 4, 10, 12, 20, 30, 50, 70, 90)
x2 <- c(2, 5, 4, 10, 12, 20, 30, 50, 70, 90)
x3 <- seq(5, 50, by 5)
x3 <- seq(5, 50 by 5)
x3 <- seq(5, 50, by = 5)
x4 <- scan()
x5 <- x(x1, x2, x3, x4)
x5 <- c(x1, x2, x3, x4)
x5
x5 <- data.frame(x1, x2, x3, x4)
x5
product <- read.table("D:\aMachineLearning\Data Files\1. ST Academy - Crash course and Regression files\Product.txt")
product <- read.table("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Product.txt")
)
product <- read.table("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Product.txt")
product <- read.table("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Product.txt")
product <- read.table("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Product.txt", header = TRUE)
product <- read.table("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Product.txt", header = TRUE, sep = "\t")
product
view(product)
data(product)
product <- read.table("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Product.txt", header = TRUE, sep = "\t")
data(product)
print(product)
product
str(product)
customer <- read.csv("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Product.txt", header = TRUE, sep = ",")
str(customer)
customer <- read.csv("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Product.txt", header = TRUE, sep = "\,")
customer <- read.csv("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Product.txt", header = TRUE)
str(customer)
customer <- read.csv("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Product.txt", header = TRUE, sep = "\t")
str(customer)
customer <- read.csv("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Customer.csv", header = TRUE, sep = "\t")
customer <- read.csv("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Customer.csv", header = TRUE, sep = ",")
customer <- read.csv("D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Customer.csv", header = TRUE)
str(customer)
str(customer)
customer
customer.describe()
customer.describe
customer
view(customer)
View(customer)
Regions <- table(customer$Region)
Regions
View(Regions)
barplot(Regions)
help("barplot")
Regions["West"]
help("barplot", density = TRUE)
barplot(Regions)
barplot(Regions[order(Regions)])
barplot(Regions[order(-Regions)])
barplot(Regions[order(-Regions)], horiz = TRUE)
barplot(Regions[order(Regions)], horiz = TRUE)
barplot(Regions[order(Regions)], horiz = TRUE, col = "red")
barplot(Regions[order(Regions)], horiz = TRUE, col = "cyan")
barplot(Regions[order(Regions)], horiz = TRUE, col = c("cyan", "blue", "purple, orange"))
barplot(Regions[order(Regions)], horiz = TRUE, col = c("cyan", "blue", "purple", "orange"))
barplot(Regions[order(-Regions)], horiz = TRUE, col = c("cyan", "blue", "purple", "orange"))
colors()
barplot(Regions[order(-Regions)], horiz = TRUE, col = c("cyan", "blue", "purple", "orange"), border = NA)
barplot(Regions[order(-Regions)], horiz = TRUE, col = c("cyan", "blue", "purple", "orange")
, border = NA,main = "Freq of regions" )
barplot(Regions[order(-Regions)], horiz = TRUE, col = c("cyan", "blue", "purple", "orange")
, border = NA,main = "Freq of regions", xlab = "Freq", ylab = "Regions")
barplot(Regions[order(-Regions)], horiz = TRUE, col = c("cyan", "blue", "purple", "orange")
, border = NA,main = "Freq of \nregions", xlab = "Freq", ylab = "Regions")
barplot(Regions[order(-Regions)], horiz = TRUE, col = c("cyan", "blue", "purple", "orange")
, border = NA,main = "Freq of \nregions", xlab = "Freq",
ylab = "Regions", legend.text = "Freq")
barplot(Regions[order(-Regions)], horiz = TRUE, col = c("cyan", "blue", "purple", "orange")
, border = NA,main = "Freq of \nregions", xlab = "Freq",
ylab = "Regions", legend.text = c("Freq", "H", "O", L))
barplot(Regions[order(-Regions)], horiz = TRUE, col = c("cyan", "blue", "purple", "orange")
, border = NA,main = "Freq of \nregions", xlab = "Freq",
ylab = "Regions", legend.text = c("Freq", "H", "O", "L"))
dev.off()
png(filename = "D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Freq of Regions.png", width = 888, height = 571)
barplot(Regions[order(-Regions)], horiz = TRUE, col = c("cyan", "blue", "purple", "orange")
, border = NA,main = "Freq of \nregions", xlab = "Freq",
ylab = "Regions", legend.text = c("Freq", "H", "O", "L"))
dev.off()
hist(Age)
Age <- table(customer$Age)
Age
hist(customer$Age)
hist(customer$Age, breaks = 5)
hist(customer$Age, breaks = c(0, 40, 60, 100))
hist(customer$Age, breaks = c(0, 40, 60, 100), freq = TRUE)
hist(customer$Age, breaks = c(0, 40, 60, 100), freq = TRUE, col = "red")
hist(customer$Age, breaks = c(0, 40, 60, 100), freq = TRUE, col = "red", main = "Histogram \nof Age")
dev.off()
png(filename ="D:/aMachineLearning/Data Files/1. ST Academy - Crash course and Regression files/Hist of Age.png", width = 1920, height = 1080)
hist(customer$Age, breaks = c(0, 40, 60, 100), freq = TRUE, col = "red", main = "Histogram \nof Age")
dev.off()
setwd("C:/Users/Rolando/Workspace/Machine Learning/Data Analysis/House price")
source('C:/Users/Rolando/Workspace/Machine Learning/Data Analysis/House price/House_Price.R', echo=TRUE)
#subset selection
install.packages("leaps")
library("leaps")
lm_best <- regsubsets(price~., data = df)
lm_best <- regsubsets(price~., data = df, nvmax = 15)
summary(lm_best)
summary(lm_best)
summary(lm_best)$adjr2
which.max(summary(lm_best)$adjr2)
summary(lm_best)
coef(lm_best, 8)
lm_forward <- regsubsets(price~., data = df, nvmax = 15, method = "forward")
summary(lm_forward)
summary(lm_forward)$adjr2
which.max(summary(lm_forward)$adjr2)
coef(lm_forward, 8)
#backward selection
lm_backward <- regsubsets(price~., data = df, nvmax = 15, method = "backward")
summary(lm_backward)
summary(lm_backward)$adjr2
which.max(summary(lm_backward)$adjr2)
coef(lm_backward, 8)
hist(summary(lm_backward)$adjr2)
barplot(summary(lm_backward)$adjr2)
# Ridge and Lasso
install.packages("glmnet")
library("glmnet")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library("glmnet")
library("Matrix")
library("glmnet")
x = model.matrix(price~., data = df)
x = model.matrix(price~., data = df)[, -1]
y = df$price
grid = 10^seq(10, -2, lenght = 100)
grid = 10^seq(10, -2, length = 100)
grid
x <- model.matrix(price~., data = df)[, -1]
y <- df$price
grid <- 10^seq(10, -2, length = 100)
lm_ridge <- gmlnet(x, y, alpha = 0, lambda = grid)
lm_ridge <- glmnet(x, y, alpha = 0, lambda = grid)
summary(lm_ridge)
cv_fit <- cv.glmnet(x, y, alpha = 0, lambda = grid)
summary(cv_fit)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
tss <- sum((y - mean(y))^2)
y_a <- predict(lm_ridge, s = opt_lambda, newx = x)
rss <- sum((y_a - y)^2)
rsq <- 1- rss/tss
#Lasso
lm_lasso <- glmnet(x, y, alpha = 1, lambda = grid)
summary(lm_ridge)
cv_fit <- cv.glmnet(x, y, alpha = 1, lambda = grid)
summary(cv_fit)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
tss <- sum((y - mean(y))^2)
y_a <- predict(lm_lasso, s = opt_lambda, newx = x)
rss <- sum((y_a - y)^2)
rsq <- 1- rss/tss
coef(lm_ridge)
lm_ridge <- glmnet(x, y, alpha = 0, lambda = grid)
summary(lm_ridge)
cv_fit <- cv.glmnet(x, y, alpha = 0, lambda = grid)
summary(cv_fit)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
tss <- sum((y - mean(y))^2)
y_a <- predict(lm_ridge, s = opt_lambda, newx = x)
rss <- sum((y_a - y)^2)
rsq <- 1- rss/tss
which.min(cv_fit$lambda)
coef(lm_ridge, which.min(cv_fit$lambda))
#Lasso
lm_lasso <- glmnet(x, y, alpha = 1, lambda = grid)
summary(lm_ridge)
cv_fit <- cv.glmnet(x, y, alpha = 1, lambda = grid)
summary(cv_fit)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
tss <- sum((y - mean(y))^2)
y_a <- predict(lm_lasso, s = opt_lambda, newx = x)
rss <- sum((y_a - y)^2)
rsq <- 1- rss/tss
which.min(cv_fit$lambda)
coef(lm_lasso, which.min(cv_fit$lambda))
#Lasso
lm_lasso <- glmnet(x, y, alpha = 1, lambda = grid)
#Lasso
lm_lasso <- glmnet(x, y, alpha = 1, lambda = grid)
summary(lm_lasso)
cv_fit <- cv.glmnet(x, y, alpha = 1, lambda = grid)
summary(cv_fit)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
tss <- sum((y - mean(y))^2)
y_a <- predict(lm_lasso, s = opt_lambda, newx = x)
rss <- sum((y_a - y)^2)
rsq <- 1- rss/tss
which.min(cv_fit$lambda)
coef(lm_lasso, which.min(cv_fit$lambda))
coef.glmnet(lm_lasso, which.min(cv_fit$lambda))
coef.glmnet(lm_lasso)
lm_ridge <- glmnet(x, y, alpha = 0, lambda = grid)
summary(lm_ridge)
cv_fit <- cv.glmnet(x, y, alpha = 0, lambda = grid)
summary(cv_fit)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
tss <- sum((y - mean(y))^2)
y_a <- predict(lm_ridge, s = opt_lambda, newx = x)
rss <- sum((y_a - y)^2)
rsq <- 1- rss/tss
which.min(grid == opt_lambda)
coef(lm_ridge, which.min(grid == opt_lambda))
where.min(grid == opt_lambda)
which(grid == opt_lambda)
grid[87]
coef(lm_ridge, which(grid == opt_lambda))
lm_ridge <- glmnet(x, y, alpha = 0, lambda = grid)
summary(lm_ridge)
cv_fit <- cv.glmnet(x, y, alpha = 0, lambda = grid)
summary(cv_fit)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
tss <- sum((y - mean(y))^2)
y_a <- predict(lm_ridge, s = opt_lambda, newx = x)
rss <- sum((y_a - y)^2)
rsq <- 1- rss/tss
which(grid == opt_lambda)
coef(lm_ridge, which(grid == opt_lambda))
#Lasso
lm_lasso <- glmnet(x, y, alpha = 1, lambda = grid)
#Lasso
lm_lasso <- glmnet(x, y, alpha = 1, lambda = grid)
summary(lm_lasso)
cv_fit <- cv.glmnet(x, y, alpha = 1, lambda = grid)
summary(cv_fit)
plot(cv_fit)
opt_lambda <- cv_fit$lambda.min
tss <- sum((y - mean(y))^2)
y_a <- predict(lm_lasso, s = opt_lambda, newx = x)
rss <- sum((y_a - y)^2)
rsq <- 1- rss/tss
which(grid == opt_lambda)
coef(lm_lasso, which(grid == opt_lambda))
train_l <- predict(cv_fit, training_set)
train_l <- predict(cv_fit, x)
mean((training_set$price - train_l)^2)
mean((x - train_l)^2)
